{"ast":null,"code":"var _jsxFileName = \"/Users/dylan/Desktop/eve-prospect/frontend/src/components/NotificationCenter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Bell } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationCenter = () => {\n  _s();\n  const [isOpen, setIsOpen] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const dropdownRef = useRef(null);\n  useEffect(() => {\n    // Gestionnaire de clic en dehors du menu\n    const handleClickOutside = event => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // Récupérer les notifications\n  const fetchNotifications = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await axios.get('http://localhost:5001/api/notifications', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.data.success) {\n        setNotifications(response.data.notifications);\n        setUnreadCount(response.data.unreadCount);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des notifications:', error);\n    }\n  };\n\n  // Charger les notifications au montage et toutes les minutes\n  useEffect(() => {\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Marquer toutes les notifications comme lues\n  const handleMarkAllAsRead = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      await axios.put('http://localhost:5001/api/notifications/read-all', {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      fetchNotifications();\n    } catch (error) {\n      console.error('Erreur lors du marquage des notifications:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    ref: dropdownRef,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"notification-button\",\n      onClick: () => setIsOpen(!isOpen),\n      \"aria-label\": \"Notifications\",\n      children: [/*#__PURE__*/_jsxDEV(Bell, {\n        className: \"notification-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"notification-badge\",\n        children: unreadCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notifications-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"notifications-title\",\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mark-all-read\",\n          onClick: handleMarkAllAsRead,\n          children: \"Tout marquer comme lu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), notifications.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications-empty\",\n        children: \"Aucune notification\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"notifications-list\",\n        children: notifications.map(notification => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `notification-item ${!notification.read ? 'unread' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"notification-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notification-title\",\n              children: notification.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notification-message\",\n              children: notification.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"notification-time\",\n              children: new Date(notification.createdAt).toLocaleString()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 37\n          }, this)\n        }, notification._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(NotificationCenter, \"INzDDUsr3+yjy7avs6BGTrkMYYk=\");\n_c = NotificationCenter;\nexport default NotificationCenter;\nvar _c;\n$RefreshReg$(_c, \"NotificationCenter\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Bell","jsxDEV","_jsxDEV","NotificationCenter","_s","isOpen","setIsOpen","notifications","setNotifications","unreadCount","setUnreadCount","dropdownRef","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","fetchNotifications","token","localStorage","getItem","response","get","headers","Authorization","data","success","error","console","interval","setInterval","clearInterval","handleMarkAllAsRead","put","className","ref","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","map","notification","read","title","message","Date","createdAt","toLocaleString","_id","_c","$RefreshReg$"],"sources":["/Users/dylan/Desktop/eve-prospect/frontend/src/components/NotificationCenter.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport { Bell } from 'lucide-react';\n\nconst NotificationCenter = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [notifications, setNotifications] = useState([]);\n    const [unreadCount, setUnreadCount] = useState(0);\n    const dropdownRef = useRef(null);\n\n    useEffect(() => {\n        // Gestionnaire de clic en dehors du menu\n        const handleClickOutside = (event) => {\n            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {\n                setIsOpen(false);\n            }\n        };\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => document.removeEventListener('mousedown', handleClickOutside);\n    }, []);\n\n    // Récupérer les notifications\n    const fetchNotifications = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            const response = await axios.get('http://localhost:5001/api/notifications', {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n\n            if (response.data.success) {\n                setNotifications(response.data.notifications);\n                setUnreadCount(response.data.unreadCount);\n            }\n        } catch (error) {\n            console.error('Erreur lors de la récupération des notifications:', error);\n        }\n    };\n\n    // Charger les notifications au montage et toutes les minutes\n    useEffect(() => {\n        fetchNotifications();\n        const interval = setInterval(fetchNotifications, 60000);\n        return () => clearInterval(interval);\n    }, []);\n\n    // Marquer toutes les notifications comme lues\n    const handleMarkAllAsRead = async () => {\n        try {\n            const token = localStorage.getItem('token');\n            await axios.put('http://localhost:5001/api/notifications/read-all', {}, {\n                headers: { Authorization: `Bearer ${token}` }\n            });\n            fetchNotifications();\n        } catch (error) {\n            console.error('Erreur lors du marquage des notifications:', error);\n        }\n    };\n\n    return (\n        <div className=\"relative\" ref={dropdownRef}>\n            {/* Bouton de notification */}\n            <button\n                className=\"notification-button\"\n                onClick={() => setIsOpen(!isOpen)}\n                aria-label=\"Notifications\"\n            >\n                <Bell className=\"notification-icon\" />\n                {unreadCount > 0 && (\n                    <span className=\"notification-badge\">{unreadCount}</span>\n                )}\n            </button>\n\n            {/* Panneau des notifications */}\n            {isOpen && (\n                <div className=\"notifications-container\">\n                    <div className=\"notifications-header\">\n                        <span className=\"notifications-title\">Notifications</span>\n                        <button\n                            className=\"mark-all-read\"\n                            onClick={handleMarkAllAsRead}\n                        >\n                            Tout marquer comme lu\n                        </button>\n                    </div>\n\n                    {notifications.length === 0 ? (\n                        <div className=\"notifications-empty\">\n                            Aucune notification\n                        </div>\n                    ) : (\n                        <div className=\"notifications-list\">\n                            {notifications.map((notification) => (\n                                <div\n                                    key={notification._id}\n                                    className={`notification-item ${!notification.read ? 'unread' : ''}`}\n                                >\n                                    <div className=\"notification-content\">\n                                        <div className=\"notification-title\">\n                                            {notification.title}\n                                        </div>\n                                        <div className=\"notification-message\">\n                                            {notification.message}\n                                        </div>\n                                        <div className=\"notification-time\">\n                                            {new Date(notification.createdAt).toLocaleString()}\n                                        </div>\n                                    </div>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default NotificationCenter;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACa,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMe,WAAW,GAAGb,MAAM,CAAC,IAAI,CAAC;EAEhCD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMe,kBAAkB,GAAIC,KAAK,IAAK;MAClC,IAAIF,WAAW,CAACG,OAAO,IAAI,CAACH,WAAW,CAACG,OAAO,CAACC,QAAQ,CAACF,KAAK,CAACG,MAAM,CAAC,EAAE;QACpEV,SAAS,CAAC,KAAK,CAAC;MACpB;IACJ,CAAC;IAEDW,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;IAC1D,OAAO,MAAMK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,kBAAkB,CAAC;EAC9E,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC,IAAI;MACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,QAAQ,GAAG,MAAMzB,KAAK,CAAC0B,GAAG,CAAC,yCAAyC,EAAE;QACxEC,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,KAAK;QAAG;MAChD,CAAC,CAAC;MAEF,IAAIG,QAAQ,CAACI,IAAI,CAACC,OAAO,EAAE;QACvBrB,gBAAgB,CAACgB,QAAQ,CAACI,IAAI,CAACrB,aAAa,CAAC;QAC7CG,cAAc,CAACc,QAAQ,CAACI,IAAI,CAACnB,WAAW,CAAC;MAC7C;IACJ,CAAC,CAAC,OAAOqB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,mDAAmD,EAAEA,KAAK,CAAC;IAC7E;EACJ,CAAC;;EAED;EACAjC,SAAS,CAAC,MAAM;IACZuB,kBAAkB,CAAC,CAAC;IACpB,MAAMY,QAAQ,GAAGC,WAAW,CAACb,kBAAkB,EAAE,KAAK,CAAC;IACvD,OAAO,MAAMc,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACA,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMxB,KAAK,CAACqC,GAAG,CAAC,kDAAkD,EAAE,CAAC,CAAC,EAAE;QACpEV,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUN,KAAK;QAAG;MAChD,CAAC,CAAC;MACFD,kBAAkB,CAAC,CAAC;IACxB,CAAC,CAAC,OAAOU,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IACtE;EACJ,CAAC;EAED,oBACI5B,OAAA;IAAKmC,SAAS,EAAC,UAAU;IAACC,GAAG,EAAE3B,WAAY;IAAA4B,QAAA,gBAEvCrC,OAAA;MACImC,SAAS,EAAC,qBAAqB;MAC/BG,OAAO,EAAEA,CAAA,KAAMlC,SAAS,CAAC,CAACD,MAAM,CAAE;MAClC,cAAW,eAAe;MAAAkC,QAAA,gBAE1BrC,OAAA,CAACF,IAAI;QAACqC,SAAS,EAAC;MAAmB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrCnC,WAAW,GAAG,CAAC,iBACZP,OAAA;QAAMmC,SAAS,EAAC,oBAAoB;QAAAE,QAAA,EAAE9B;MAAW;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAC3D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,EAGRvC,MAAM,iBACHH,OAAA;MAAKmC,SAAS,EAAC,yBAAyB;MAAAE,QAAA,gBACpCrC,OAAA;QAAKmC,SAAS,EAAC,sBAAsB;QAAAE,QAAA,gBACjCrC,OAAA;UAAMmC,SAAS,EAAC,qBAAqB;UAAAE,QAAA,EAAC;QAAa;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eAC1D1C,OAAA;UACImC,SAAS,EAAC,eAAe;UACzBG,OAAO,EAAEL,mBAAoB;UAAAI,QAAA,EAChC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,EAELrC,aAAa,CAACsC,MAAM,KAAK,CAAC,gBACvB3C,OAAA;QAAKmC,SAAS,EAAC,qBAAqB;QAAAE,QAAA,EAAC;MAErC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,gBAEN1C,OAAA;QAAKmC,SAAS,EAAC,oBAAoB;QAAAE,QAAA,EAC9BhC,aAAa,CAACuC,GAAG,CAAEC,YAAY,iBAC5B7C,OAAA;UAEImC,SAAS,EAAE,qBAAqB,CAACU,YAAY,CAACC,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;UAAAT,QAAA,eAErErC,OAAA;YAAKmC,SAAS,EAAC,sBAAsB;YAAAE,QAAA,gBACjCrC,OAAA;cAAKmC,SAAS,EAAC,oBAAoB;cAAAE,QAAA,EAC9BQ,YAAY,CAACE;YAAK;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClB,CAAC,eACN1C,OAAA;cAAKmC,SAAS,EAAC,sBAAsB;cAAAE,QAAA,EAChCQ,YAAY,CAACG;YAAO;cAAAT,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpB,CAAC,eACN1C,OAAA;cAAKmC,SAAS,EAAC,mBAAmB;cAAAE,QAAA,EAC7B,IAAIY,IAAI,CAACJ,YAAY,CAACK,SAAS,CAAC,CAACC,cAAc,CAAC;YAAC;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjD,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL;QAAC,GAbDG,YAAY,CAACO,GAAG;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAcpB,CACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CACR;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACxC,EAAA,CAhHID,kBAAkB;AAAAoD,EAAA,GAAlBpD,kBAAkB;AAkHxB,eAAeA,kBAAkB;AAAC,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}